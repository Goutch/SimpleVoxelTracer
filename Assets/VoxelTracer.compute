#pragma kernel CSMain
#pragma exclude_renderers d3d11_9x
#pragma exclude_renderers d3d9

RWTexture2D<float4> OutputTexture;
int2 TextureResolution;

Buffer<int> VoxelData;
int3 VoxelDataResolution;
float VoxelSize;

Buffer<float4> VoxelMaterialColor;

float4x4 ViewRotation;
float3 ViewPosition;
float MaxDistance;

float3 SkyColor;

int getIndex(uint3 position)
{
    return (position.x * VoxelDataResolution.z * VoxelDataResolution.y) +
        (position.y * VoxelDataResolution.z) +
        position.z;
}

int3 getNextStep(float3 origin, float3 direction, int3 stepDir, float3 planes)
{
    int3 step = int3(0, 0, 0);
    float t = MaxDistance;
    float3 ts = (planes - origin) / direction;
    if (ts.x < t)
    {
        t = ts.x;
        step = int3(stepDir.x, 0, 0);
    }
    if (ts.y < t)
    {
        t = ts.y;
        step = int3(0, stepDir.y, 0);
    }
    if (ts.z < t)
    {
        t = ts.z;
        step = int3(0, 0, stepDir.z);
    }

    return step;
}

float3 trace(float3 origin, float3 direction)
{
    //division by 0 protection just to be safe
    if (direction.x == 0.)direction.x = .00000001f;
    if (direction.y == 0.)direction.y = .00000001f;
    if (direction.z == 0.)direction.z = .00000001f;

    float t = 0.;

    int3 stepDir = int3(direction.x < 0 ? -1 : 1, direction.y < 0 ? -1 : 1, direction.z < 0 ? -1 : 1);

    //if origin outside the bounding box

    float3 minBound = float3(0., 0., 0.);
    float3 maxBound = float3(VoxelDataResolution * VoxelSize);
    int3 nextStep=int3(0,0,0);
    if (origin.x < minBound.x || origin.y < minBound.y || origin.z < minBound.z ||
        origin.x > maxBound.x || origin.y > maxBound.y || origin.z > maxBound.z)
    {
        float3 planes = float3(stepDir.x >= 0 ? minBound.x : maxBound.x,
                               stepDir.y >= 0 ? minBound.y : maxBound.y,
                               stepDir.z >= 0 ? minBound.z : maxBound.z);
        t = MaxDistance;
        float3 ts = (planes - origin) / direction;
        float3 p = direction * ts.x + origin;
        if (ts.x > 0 &&
            p.y > minBound.y && p.y < maxBound.y &&
            p.z > minBound.z && p.z < maxBound.z)
        {
            t = min(t, ts.x);
            nextStep=int3(stepDir.x,0,0);
        }
        p = direction * ts.y + origin;
        if (ts.y > 0 &&
            p.x > minBound.x && p.x < maxBound.x &&
            p.z > minBound.z && p.z < maxBound.z)
        {
            t = min(t, ts.y);
            nextStep=int3(0,stepDir.y,0);
        }
        p = direction * ts.z + origin;
        if (ts.z > 0 &&
            p.x > minBound.x && p.x < maxBound.x &&
            p.y > minBound.y && p.y < maxBound.y)
        {
            t = min(t, ts.z);
            nextStep=int3(0,0,stepDir.z);
        }
        if (t >= MaxDistance)
            return SkyColor;
    }

    //Begin tracing the ray along the voxel data
    float3 worldPosition = direction * t + origin;
    int3 unitPosition = int3(
        clamp(floor(worldPosition.x / VoxelSize), 0, VoxelDataResolution.x - 1),
        clamp(floor(worldPosition.y / VoxelSize), 0, VoxelDataResolution.y - 1),
        clamp(floor(worldPosition.z / VoxelSize), 0, VoxelDataResolution.z - 1));
    
    for (uint i = 0; i < 256; i++)
    {
        int index = getIndex(unitPosition);
        if (unitPosition.x >= VoxelDataResolution.x ||
            unitPosition.y >= VoxelDataResolution.y ||
            unitPosition.z >= VoxelDataResolution.z ||
            unitPosition.x < 0 ||
            unitPosition.y < 0 ||
            unitPosition.z < 0)
            break;
        if (VoxelData[index] != -1)return VoxelMaterialColor[VoxelData[index]];
        unitPosition += nextStep;
        nextStep = getNextStep(origin, direction, stepDir, (unitPosition+stepDir)*VoxelSize);

    }
    return SkyColor;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(id.x, id.y) / float2(TextureResolution.x, TextureResolution.y);
    uv -= 0.5;
    uv.y *= float(TextureResolution.y) / float(TextureResolution.x);

    float3 dir = float3(uv.x, uv.y, 1.);
    float3 origin = ViewPosition;

    dir = mul(ViewRotation, float4(dir.x, dir.y, dir.z, 1.)).xyz;
    dir = normalize(dir);
    OutputTexture[id.xy] = float4(trace(origin, dir), 1);
}
